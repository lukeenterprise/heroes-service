<div class="page-width">
  <div class="grid">

    <div class="grid__item medium-up--one-half medium-up--push-one-quarter">
      <div class="content-block text-center">

        <div class="form-success hide" id="ResetSuccess">
          {{ 'customer.recover_password.success' | t }}
        </div>

        <div id="CustomerLoginForm" class="form-vertical">
          {% form 'customer_login' %}

            <h1>{{ 'customer.login.title' | t }}</h1>

            {{ form.errors | default_errors }}

            <label for="CustomerEmail" class="label--hidden">{{ 'customer.login.email' | t }}</label>
            <input type="email" name="customer[email]" id="CustomerEmail" class="{% if form.errors contains 'email' %} input--error{% endif %}" placeholder="{{ 'customer.login.email' | t }}" autocorrect="off" autocapitalize="off" autofocus>

            {% if form.password_needed %}
              <label for="CustomerPassword" class="label--hidden">{{ 'customer.login.password' | t }}</label>
              <input type="password" value="" name="customer[password]" id="CustomerPassword" class="{% if form.errors contains 'password' %} input--error{% endif %}" placeholder="{{ 'customer.login.password' | t }}">
            {% endif %}

            <p>
              <input type="submit" class="btn" value="{{ 'customer.login.sign_in' | t }}">
            </p>
            {% if form.password_needed %}
              <p><a href="#recover" id="RecoverPassword">{{ 'customer.login.forgot_password' | t }}</a></p>
            {% endif %}

            <p>{{ 'layout.customer.create_account' | t | customer_register_link }}</p>

          {% endform %}
        </div>

        {% comment %}
          JS shows/hides this form in ShopifySlate.loginForms()
        {% endcomment %}
        <div id="RecoverPasswordForm" class="hide">

          <h2 class="h1">{{ 'customer.recover_password.title' | t }}</h2>
          <p>{{ 'customer.recover_password.subtext' | t }}</p>

          <div class="form-vertical">
            {% form 'recover_customer_password' %}

              {{ form.errors | default_errors }}

              {% comment %}
                Add a hidden span to indicate the form was submitted succesfully.
              {% endcomment %}
              {% if form.posted_successfully? %}
                <span class="hide reset-password-success"></span>
              {% endif %}

              <label for="RecoverEmail" class="label--hidden">{{ 'customer.recover_password.email' | t }}</label>
              <input type="email" value="" name="email" id="RecoverEmail" placeholder="{{ 'customer.recover_password.email' | t }}" autocorrect="off" autocapitalize="off">

              <p>
                <input type="submit" class="btn" value="{{ 'customer.recover_password.submit' | t }}">
              </p>

              <button type="button" id="HideRecoverPasswordLink" class="text-link link-accent-color">{{ 'customer.recover_password.cancel' | t }}</button>
            {% endform %}
          </div>

        </div>

      </div>

      {% comment %}
        If accounts are set as optional, the following will be shown as an option
        during checkout, not on the default /login page.
      {% endcomment %}
      {% if shop.checkout.guest_login %}
        <div class="content-block text-center">
          <h2 class="h1">{{ 'customer.login.guest_title' | t }}</h2>

          {% form 'guest_login' %}
            <input type="submit" class="btn" value="{{ 'customer.login.guest_continue' | t }}">
          {% endform %}
        </div>
      {% endif %}
    </div>

  </div>
</div>
console.log('Loading function');

const doc = require('dynamodb-doc');

const dynamo = new doc.DynamoDB();


/**
 * Demonstrates a simple HTTP endpoint using API Gateway. You have full
 * access to the request and response payload, including headers and
 * status code.
 *
 * To scan a DynamoDB table, make a GET request with the TableName as a
 * query string parameter. To put, update, or delete an item, make a POST,
 * PUT, or DELETE request respectively, passing in the payload to the
 * DynamoDB API as a JSON body.
 */
exports.handler = (event, context, callback) => {
    //console.log('Received event:', JSON.stringify(event, null, 2));

    const done = (err, res) => callback(null, {
        statusCode: err ? '400' : '200',
        body: err ? err.message : JSON.stringify(res),
        headers: {
            'Content-Type': 'application/json',
        },
    });

    switch (event.httpMethod) {
        case 'DELETE':
            dynamo.deleteItem(JSON.parse(event.body), done);
            break;
        case 'GET':
            dynamo.scan({ TableName: event.queryStringParameters.TableName }, done);
            break;
        case 'POST':
            dynamo.putItem(JSON.parse(event.body), done);
            break;
        case 'PUT':
            dynamo.updateItem(JSON.parse(event.body), done);
            break;
        default:
            done(new Error(`Unsupported method "${event.httpMethod}"`));
    }
};
